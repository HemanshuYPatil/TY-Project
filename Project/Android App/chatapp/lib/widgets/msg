import 'dart:developer';
import 'package:chatapp/main.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:chatapp/pages/imagescreen.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:gallery_saver/gallery_saver.dart';
import 'package:video_player/video_player.dart';

import '../Auth/auth.dart';
import '../helper/dialogs.dart';
import '../helper/my_date_util.dart';
import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';
import '../models/message.dart';
import '../pages/vedioplayer.dart';

class MessageCard extends StatefulWidget {
  const MessageCard({Key? key, required this.message}) : super(key: key);

  final Message message;

  @override
  _MessageCardState createState() => _MessageCardState();
}

class _MessageCardState extends State<MessageCard> {
  VideoPlayerController? _videoPlayerController;
  Future<void>? _initializeVideoPlayerFuture;

  @override
  void initState() {
    super.initState();
    if (widget.message.type == Type.video) {
      _videoPlayerController =
          VideoPlayerController.network(widget.message.msg);
      _initializeVideoPlayerFuture = _videoPlayerController!.initialize();
    }
  }

  @override
  void dispose() {
    _videoPlayerController?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final mq = MediaQuery.of(context).size;

    bool isMe = APIs.user.uid == widget.message.fromId;

    return InkWell(
      onLongPress: () {
        _showBottomSheet(isMe);
      },
      child: isMe ? _greenMessage() : _blueMessage(),
    );
  }

  Widget _blueMessage() {
    if (widget.message.read.isEmpty) {
      APIs.updateMessageReadStatus(widget.message);
    }

    return SingleChildScrollView(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // ... (your existing code)

          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Flexible(
                child: Container(
                  padding: EdgeInsets.all(widget.message.type == Type.image
                      ? mq.width * .03
                      : mq.width * .04),
                  margin: EdgeInsets.symmetric(
                      horizontal: mq.width * .04, vertical: mq.height * .01),
                  decoration: BoxDecoration(
                    color: Color.fromRGBO(231, 235, 244, 20),
                    border:
                        Border.all(color: Color.fromRGBO(231, 235, 244, 10)),
                    borderRadius: const BorderRadius.only(
                      topLeft: Radius.circular(15),
                      topRight: Radius.circular(15),
                      bottomRight: Radius.circular(15),
                    ),
                  ),
                  child: widget.message.type == Type.text
                      ? Text(
                          widget.message.msg,
                          style:
                              const TextStyle(fontSize: 16, color: Colors.black),
                        )
                      : widget.message.type == Type.image
                          ? GestureDetector(
                              onTap: () {
                                Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (_) =>
                                          ImageScreen(widget.message.msg),
                                    ));
                              },
                              child: ClipRRect(
                                borderRadius: BorderRadius.circular(15),
                                child: CachedNetworkImage(
                                  imageUrl: widget.message.msg,
                                  placeholder: (context, url) => const Padding(
                                    padding: EdgeInsets.all(8.0),
                                    child: CircularProgressIndicator(
                                        strokeWidth: 2),
                                  ),
                                  errorWidget: (context, url, error) =>
                                      const Icon(Icons.image, size: 70),
                                ),
                              ),
                            )
                          : Stack(
                              alignment: Alignment.center,
                              children: [
                                FutureBuilder<void>(
                                  future: _initializeVideoPlayerFuture,
                                  builder: (context, snapshot) {
                                    if (snapshot.connectionState ==
                                        ConnectionState.done) {
                                      return AspectRatio(
                                        aspectRatio: _videoPlayerController!
                                            .value.aspectRatio,
                                        child: VideoPlayer(
                                            _videoPlayerController!),
                                      );
                                    } else {
                                      return const CircularProgressIndicator();
                                    }
                                  },
                                ),
                                IconButton(
                                  icon: Icon(
                                    (_videoPlayerController?.value.isPlaying ??
                                            false)
                                        ? Icons.pause_sharp
                                        : Icons.play_arrow_rounded,
                                    color: Colors.white,
                                    size: 40,
                                  ),
                                  onPressed: () {
                                    Navigator.push(
                                        context,
                                        MaterialPageRoute(
                                          builder: (_) => VideoPlayerScreen(
                                              widget.message.msg),
                                        ));

                                    log(widget.message.msg);
                                  },
                                ),
                              ],
                            ),
                ),
              ),
              Padding(
                padding: EdgeInsets.only(right: mq.width * .04),
                child: Text(
                  MyDateUtil.getFormattedTime(
                      context: context, time: widget.message.sent),
                  style: const TextStyle(fontSize: 13, color: Colors.black54),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _greenMessage() {
    bool isMessageSeen = widget.message.read.isNotEmpty;

    return Container(
      child: GestureDetector(
        onTap: () {
          if (widget.message.type == Type.video) {
            // Open video in video player when clicked
            // Launch video player with the video URL
          }
        },
        child: Column(
          children: [
            Row(
              children: [
                // double tick blue icon for message read
                Icon(
                  isMessageSeen
                      ? Icons.done_all_rounded
                      : Icons.done_rounded,
                  color: Colors.blue,
                  size: 20,
                ),
                const SizedBox(width: 2),
                Text(
                  MyDateUtil.getFormattedTime(
                      context: context, time: widget.message.sent),
                  style: const TextStyle(fontSize: 13, color: Colors.black54),
                ),
              ],
            ),
            Expanded(
              child: Container(
                padding: EdgeInsets.all(widget.message.type == Type.image
                    ? mq.width * .03
                    : mq.width * .04),
                margin: EdgeInsets.symmetric(
                    horizontal: mq.width * .04, vertical: mq.height * .01),
                decoration: BoxDecoration(
                  color: const Color.fromRGBO(54, 96, 255, 5),
                  border: Border.all(
                      color: const Color.fromRGBO(54, 96, 255, 5)),
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(15),
                    topRight: Radius.circular(15),
                    bottomLeft: Radius.circular(15),
                  ),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    if (widget.message.reply != null &&
                        widget.message.reply!.replyMessage.isNotEmpty)
                      Container(
                        margin: EdgeInsets.only(bottom: 8.0),
                        padding: const EdgeInsets.all(8.0),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(16.0),
                          color: const Color.fromRGBO(54, 96, 255, 5),
                        ),
                        child: Row(
                          children: [
                            const Icon(Icons.reply, color: Colors.white),
                            const SizedBox(width: 8.0),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    'Replying to: ${widget.message.reply?.replierName}',
                                    style: TextStyle(
                                      fontSize: 12.0,
                                      color: Colors.white70,
                                    ),
                                  ),
                                  SizedBox(
                                    height: 5,
                                  ),
                                  Text(
                                    widget.message.reply!.replyMessage,
                                    style: const TextStyle(
                                      fontSize: 16.0,
                                      color: Colors.white,
                                    ),
                                    maxLines: 1,
                                    // overflow: TextOverflow.ellipsis,
                                  ),
                                ],
                              ),
                            ),
                            IconButton(
                              onPressed: () {
                                setState(() {
                                  widget.message.reply?.replyMessage = '';
                                });
                              },
                              icon:
                                  const Icon(Icons.close, color: Colors.white),
                            ),
                          ],
                        ),
                      ),
                    widget.message.type == Type.text
                        ? Text(
                            widget.message.msg,
                            style: const TextStyle(
                                fontSize: 16, color: Colors.white),
                          )
                        : widget.message.type == Type.image
                            ? GestureDetector(
                                onTap: () {
                                  Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (_) =>
                                            ImageScreen(widget.message.msg),
                                      ));
                                },
                                child: ClipRRect(
                                  borderRadius: BorderRadius.circular(15),
                                  child: CachedNetworkImage(
                                    imageUrl: widget.message.msg,
                                    placeholder: (context, url) =>
                                        const Padding(
                                      padding: EdgeInsets.all(8.0),
                                      child: CircularProgressIndicator(
                                          strokeWidth: 2),
                                    ),
                                    errorWidget: (context, url, error) =>
                                        const Icon(Icons.image, size: 70),
                                  ),
                                ),
                              )
                            : Stack(
                                alignment: Alignment.center,
                                children: [
                                  FutureBuilder<void>(
                                    future: _initializeVideoPlayerFuture,
                                    builder: (context, snapshot) {
                                      if (snapshot.connectionState ==
                                          ConnectionState.done) {
                                        return AspectRatio(
                                          aspectRatio: _videoPlayerController!
                                              .value.aspectRatio,
                                          child: VideoPlayer(
                                              _videoPlayerController!),
                                        );
                                      } else {
                                        return const CircularProgressIndicator();
                                      }
                                    },
                                  ),
                                  IconButton(
                                    icon: Icon(
                                      (_videoPlayerController?.value.isPlaying ??
                                              false)
                                          ? Icons.pause_sharp
                                          : Icons.play_arrow_rounded,
                                      color: Colors.white,
                                      size: 40,
                                    ),
                                    onPressed: () {
                                      Navigator.push(
                                          context,
                                          MaterialPageRoute(
                                            builder: (_) => VideoPlayerScreen(
                                                widget.message.msg),
                                          ));

                                      log(widget.message.msg);
                                    },
                                  ),
                                ],
                              ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

}

class _OptionItem extends StatelessWidget {
  final Icon icon;
  final String name;
  final VoidCallback onTap;

  const _OptionItem({
    required this.icon,
    required this.name,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      child: Padding(
        padding: const EdgeInsets.only(left: 8, top: 8, bottom: 8),
        child: Row(
          children: [
            icon,
            const SizedBox(width: 8),
            Flexible(
              child: Text(
                name,
                style: const TextStyle(
                    fontSize: 15, color: Colors.black54, letterSpacing: 0.5),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
